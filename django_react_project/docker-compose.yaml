version: '2.2'
services:
  elastic:
    container_name: es01
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.4
        # 8.x
    environment: ['ES_JAVA_OPTS=-Xms2g -Xmx2g','bootstrap.memory_lock=true','discovery.type=single-node','xpack.security.enabled=false', 'xpack.security.enrollment.enabled=false']
    
    # 7.17.X
    # environment: ['ES_JAVA_OPTS=-Xms2g -Xmx2g','bootstrap.memory_lock=true','discovery.type=single-node']
    healthcheck:
      test: curl -s http://localhost:9200 >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 50

    ports:
      - 9200:9200
    networks:
      - elastic
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
  
  backend:
    restart: always
    container_name: back
      #command : bash -c "python backend/data/test.py"
    command: bash -c "git clone https://github.com/svernier/elasticsearch_loader.git && cd elasticsearch_loader && python setup.py install && cd .. && elasticsearch_loader --es-host http://es01:9200 --index newsgroup json data/*.json"
    #command: bash -c "cd elasticsearch_loader && git pull && python setup.py install && elasticsearch_loader --index newsgroup json backend/data/*.json"
    # env_file:12
    #   - ./project/settings.ini
    build:
      context: ./backout/
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      elastic:
          condition: service_healthy
    networks:
      - elastic

  frontend:
    restart: always
    command : npm start
    container_name: front
    build:
      context: ./stonks-fe/
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    stdin_open: true
    depends_on:
      - backend
    networks:
      - elastic

# volumes:
#   data01:
#     driver: local
#   data02:
#     driver: local
#   data03:
#     driver: local

networks:
  elastic:
    driver: bridge

